---

- name: install gogs pre requisites
  apt: 
    name:
    - git
    state: present

- name: Ensure group "gogs" exists
  group:
    name: gogs
    state: present

- name: Add the user 'gogs'
  user:
    name: gogs
    group: gogs

- name: Is already installed ?
  stat:
    path: "/opt/gogs/custom/conf/app.ini"
  register: already_installed

- name: Is already downloaded ?
  stat:
    path: "'/tmp/gogs-{{package.version}}.zip'"
  register: already_zip

- name: Create dedicated database
  include_role:
    name : pg_new_fresh_database
  vars:
  - pg_username: '{{ dbschema.gogs.username }}'
  - pg_password: '{{ dbschema.gogs.password }}'
  - pg_database: '{{ dbschema.gogs.database }}'
  when: not already_installed.stat.exists is defined or not already_installed.stat.exists

- name: Download gogs files
  get_url:
    url: https://dl.gogs.io/{{ package.version }}/gogs_{{ package.version }}_linux_amd64.zip
    dest: '/tmp/gogs-{{ package.version }}.zip'
  when: not already_zip.stat.exists is defined or not already_zip.stat.exists

- name: Backup old installation, if needed
  copy:
    remote_src: true
    src: '/opt/gogs/custom/conf/app.ini'
    dest: '/opt/app.ini'
  when: already_installed.stat.exists is defined and already_installed.stat.exists

- name: Backup old installation data, if needed
  copy:
    remote_src: true
    src: '/opt/gogs/data'
    dest: '/opt/data'
    owner: gogs
    group: gogs    
  when: already_installed.stat.exists is defined and already_installed.stat.exists

- name: Cleanup target folder
  file:
    path: '{{ item }}'
    state: absent
  loop:
  - '/opt/gogs-{{package.version}}'
  - '/opt/gogs'

- name: Extract gogs files into /opt
  unarchive:
    src: '/tmp/gogs-{{ package.version }}.zip'
    dest: /opt
    remote_src: 'yes'
    owner: gogs
    group: gogs

- name: rename default folder name
  command: 'mv /opt/gogs /opt/gogs-{{package.version}}'

- name: link to current version
  file:
    src: /opt/gogs-{{package.version}}
    dest: /opt/gogs
    state: 'link'
    owner: 'gogs'
    group: 'gogs'

- name: Configuration folder creation
  file:
    path: '/opt/gogs/custom/conf'
    state: 'directory'
    owner: gogs
    group: gogs

- name: Data folder creation
  file:
    path: '/data/gogs-repositories'
    state: 'directory'
    owner: gogs
    group: gogs

- name: Restore old configuration, if needed
  command: mv /opt/app.ini /opt/gogs/custom/conf/app.ini
  when: already_installed.stat.exists is defined and already_installed.stat.exists

- name: Restore old configuration data, if needed
  command: mv /opt/data /opt/gogs/data
  when: already_installed.stat.exists is defined and already_installed.stat.exists

- name: Copy database configuration file
  template:
    src: app.ini
    dest: /opt/gogs/custom/conf/app.ini
    owner: gogs
    group: gogs
    mode: '0644'
  when: not already_installed.stat.exists is defined or not already_installed.stat.exists
  
- name: Make executable gogs
  file:
    path: '/opt/gogs/gogs'
    mode: u+rxw,g+rx,o+rx

- name: Install gogs service script
  copy:
    src: gogs.service
    dest: /etc/systemd/system/gogs.service
    owner: root
    group: root
    mode: '0644'

- name: Gogs service reload/start
  systemd:
    name: 'gogs'
    daemon_reload: true
    state: restarted
    enabled: true

- name: Create admin user
  command: '/opt/gogs/gogs admin create-user --name {{ gogs.admin.username }} -password {{ gogs.admin.password }} --email {{ gogs.admin.email }} --admin'
  become_user: 'gogs'
  when: not already_installed.stat.exists is defined or not already_installed.stat.exists

- name: nextcloud service reload/start
  systemd:
    name: 'nginx'
    daemon_reload: true
    state: started
    enabled: true

- name: generate gogs certificate
  shell: /usr/bin/certbot certonly -d gogs.meallier.fr -m eric@meallier.fr --agree-tos --webroot --no-eff-email --webroot-path /opt/nginx/html  --keep-until-expiring --non-interactive
  when: not redmine_unsecured
      
# finish installation with ssl termination
- name: Copy full nginx ssl configuration file
  template:
    src: gogs.conf
    dest: /opt/nginx/conf/server/gogs.conf

- name: Nginx service restart with full configuration
  systemd:
    name: 'nginx'
    state: restarted

- name: Ouverture firewall entrant (tcp)
  ufw:
    rule: 'allow'
    proto: 'tcp'
    port: '{{ gogs.ssh.port }}'

- name: logrotate configuration
  copy:
    src: logrotate
    dest: /etc/logrotate.d/gogs  