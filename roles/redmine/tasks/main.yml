---

- name: Install redmine pre requisites
  apt: 
    name:
    - curl
    - gnupg2
    - libcurl4-openssl-dev
    - libmagickwand-dev
    - postgresql-client-{{ postgresql.version }}
    - postgresql-server-dev-{{ postgresql.version }}
    - imagemagick
    - git
    state: present

- name: Is already installed ?
  stat:
    path: "/opt/redmine/config/database.yml"
  register: already_installed

- name: Is already downloaded ?
  stat:
    path: '/tmp/redmine-{{ package.version }}.{{package.type}}'
  register: already_zip

- name: Create dedicated database
  include_role:
    name : pg_new_fresh_database
  vars:
  - pg_username: '{{ postgresql.redmine.username }}'
  - pg_password: '{{ postgresql.redmine.password }}'
  - pg_database: '{{ postgresql.redmine.database }}'
  when: not already_installed.stat.exists is defined or not already_installed.stat.exists

- name: adding gpg key for rvm mpapis
  shell: curl -sSL https://rvm.io/mpapis.asc | gpg --import -
  
- name: adding gpg key for rvm pkuczynski
  shell: curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
  
- name: check is rvm already installed
  stat:
    path: /usr/local/rvm
  register: rvmExists
  
- name: install rvm
  shell: \curl -sSL https://get.rvm.io | bash -s stable
  when: not rvmExists.stat.isdir is defined or not rvmExists.stat.isdir

- name: Adding user root to rvm users
  user:
    name: 'root'
    group: 'rvm'
    append: yes

- name: check if nginx already exists
  stat: 
    path: /opt/nginx/sbin/nginx
  register: nginx_exists

- name: install ruby {{ruby.version}}
  shell: /usr/local/rvm/bin/rvm install {{ruby.version}}

- name: use {{ruby.version}} ruby version
  shell: /usr/local/rvm/bin/rvm --default use {{ruby.version}}

- name: install pg client
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; gem install pg -v '{{ package.gems.pg }}'

- name: install rmagick
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; gem install rmagick -v '{{ package.gems.rmagick }}'

- name: install passenger
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; gem install passenger -v '{{ package.gems.passenger }}'
  when: not nginx_exists.stat.exists

- name: install strscan
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; gem install strscan -v '{{ package.gems.strscan }}'

- name: install nginx with passenger
  shell: passenger-install-nginx-module --auto --auto-download --prefix=/opt/nginx --languages ruby
  environment:
    GEM_PATH: '/usr/local/rvm/gems/ruby-{{ruby.version}}:/usr/local/rvm/gems/ruby-{{ruby.version}}@global'
    GEM_HOME: '/usr/local/rvm/gems/ruby-{{ruby.version}}'
    PATH: '/usr/local/rvm/gems/ruby-{{ruby.version}}/bin:/usr/local/rvm/gems/ruby-{{ruby.version}}@global/bin:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/rvm/bin'
  when: not nginx_exists.stat.exists

- name: add mjs extension to javascript files
  lineinfile:
    dest: /opt/nginx/conf/mime.types
    insertafter: '[Service]'
    regexp: '    application/javascript.*'
    line: '    application/javascript                           js mjs;'
  when: not nginx_exists.stat.exists

- name: Ensure group "redmine" exists
  group:
    name: redmine
    state: present

- name: Add the user 'redmine'
  user:
    name: redmine
    group: redmine

- name: Adding user redmine to rvm users
  user:
    name: 'redmine'
    group: 'rvm'
    append: yes

- name: Backup old installation, if needed
  copy:
    remote_src: true
    src: '/opt/redmine/config/{{ item }}'
    dest: '/opt/{{ item }}'
  ignore_errors: true
  loop: 
  - 'configuration.yml'
  - 'database.yml'
  when: already_installed.stat.exists is defined and already_installed.stat.exists

- name: Cleanup target folder
  file:
    path: '{{ item }}'
    state: absent
  loop:
  - '/opt/redmine-{{package.version}}'
  - '/opt/redmine'

- name: Download redmine files
  get_url:
    url: https://www.redmine.org/releases/redmine-{{package.version}}.{{package.type}}
    dest: /tmp/redmine-{{package.version}}.{{package.type}}
    checksum: sha256:{{package.checksum.sha256}}
  when: not already_zip.stat.exists is defined or not already_zip.stat.exists

- name: Extract redmine files into /opt
  unarchive:
    src: /tmp/redmine-{{package.version}}.{{package.type}}
    dest: /opt
    remote_src: 'yes'
    owner: 'nobody'
    group: 'rvm'
    mode: '775'

- name: link to current version
  file:
    src: /opt/redmine-{{package.version}}
    dest: /opt/redmine
    state: 'link'
    owner: 'nobody'
    group: 'rvm'

- name: Copy database configuration file
  template:
    src: database.yml
    dest: /opt/redmine/config/database.yml
    owner: 'nobody'
    group: 'rvm'
    mode: '0644'
  when: not already_installed.stat.exists is defined or not already_installed.stat.exists

- name: Copy mail configuration file
  template:
    src: configuration.yml
    dest: /opt/redmine/config/configuration.yml
    owner: 'nobody'
    group: 'rvm'
    mode: '0644'
  when: not already_installed.stat.exists is defined or not already_installed.stat.exists

- name: Restore old configuration, if needed
  command: mv /opt/{{ item }} /opt/redmine/config/{{ item }}
  loop:
    - 'configuration.yml'
    - 'database.yml'
  ignore_errors: true
  when: already_installed.stat.exists is defined and already_installed.stat.exists

- name: configure bundle tools
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; bundle config set --local without 'development test'
  args:
    chdir: '/opt/redmine/'
  become_user: redmine

- name: configure redmine user to retrieve gems
  shell: chmod -R g+w /usr/local/rvm/rubies/ruby-{{ruby.version}}/lib/ruby/gems/{{ruby.reducedversion}}

- name: retrieve dependencies for redmine
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; bundle install
  args:
    chdir: '/opt/redmine/'
  become_user: redmine

- name: generate redmine token
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; bin/rake generate_secret_token
  args:
    chdir: '/opt/redmine/'
  become_user: redmine

- name: migrate redmine database
  shell: PATH=$PATH:/usr/local/rvm/rubies/ruby-{{ruby.version}}/bin; RAILS_ENV=production bin/rake db:migrate
  args:
    chdir: '/opt/redmine/'
  become_user: redmine

- name: directory for files under /data
  file:
    path: /data/redmine-files
    state: 'directory'
    owner: 'nobody'
    group: 'nogroup'

- name: directory for logs
  file:
    path: /var/log/nginx
    state: 'directory'

- name: remove default files directory
  file:
    path: /opt/redmine-{{package.version}}/files
    state: 'absent'

- name: link to data directory
  file:
    src: /data/redmine-files
    dest: /opt/redmine-{{package.version}}/files
    state: 'link'
    owner: 'nobody'
    group: 'nogroup'
  
- name: permission to tmp directory
  file:
    path: /opt/redmine-{{package.version}}/tmp
    state: 'directory'
    mode: '777'
    owner: 'nobody'
    group: 'nogroup'
    recurse: true

- name: Install nginx service script
  copy:
    src: nginx.service
    dest: /etc/systemd/system/nginx.service
    owner: root
    group: root
    mode: '0644'

- name: Copy minimal nginx configuration file
  template:
    src: minimal.conf
    dest: /opt/nginx/conf/nginx.conf
    owner: 'nobody'
    group: 'nogroup'
    mode: '0644'

- name: Create external configuration for nginx
  file:
    path: /opt/nginx/conf/server
    state: 'directory'
    mode: '0755'
  
- name: Nginx service reload/start
  systemd:
    name: 'nginx'
    daemon_reload: true
    state: started
    enabled: true

# certbot installation
- name: install certobot wth dependencies
  apt: 
    name:
    - certbot
    state: present

- name: create acme challenge folder
  file:
    path: /opt/nginx/html/.well-known/acme-challenge
    state: directory
    recurse: yes
    owner: nobody
    group: nogroup
    mode: u+rxw,g+rw,o+rw

- name: generate redmine certificate
  shell: /usr/bin/certbot certonly -d redmine.meallier.fr -m eric@meallier.fr --agree-tos --webroot --no-eff-email --webroot-path /opt/nginx/html  --keep-until-expiring --non-interactive
  when: not redmine_unsecured

- name: check is DH already exists
  stat:
    path: /etc/redmine.dhparam.pem
  register: DHExists
  when: not redmine_unsecured

- name: generate Secure Diffie-Hellman
  shell: /usr/bin/openssl dhparam -out /etc/redmine.dhparam.pem 4096
  when: not redmine_unsecured and ( not DHExists.stat.exists is defined or not DHExists.stat.exists)

# finish installation with ssl termination
- name: Copy full nginx ssl configuration file
  template:
    src: redmine.conf
    dest: /opt/nginx/conf/server/redmine.conf

- name: certbot deploy hook
  copy:
    src: restartNginx.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/restartNginx.sh
    mode: '0644'
  when: not redmine_unsecured

- name: Nginx service restart with full configuration
  systemd:
    name: 'nginx'
    state: restarted

- name: logrotate configuration
  copy:
    src: logrotate
    dest: /etc/logrotate.d/redmine
